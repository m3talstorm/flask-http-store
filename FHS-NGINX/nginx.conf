
# ****************************************************************************
# NOTE: This was copied from another toy project, this probably needs tweaking
# ****************************************************************************

user  nginx;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


# How many cores Nginx can use, set this to auto to allow it to grow as cores change
worker_processes auto;
# Max number of file descriptors Nginx has access to (translates into concurrent connections)
# worker_connections 1024;

# provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4000;

    # optmized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    # multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$time_local $request_id $remote_addr "$request" '
                      '$status $body_bytes_sent $request_time';

    # Stop the Nginx exposing version and OS details
    server_tokens off;

    # access_log off;
    access_log  /var/log/nginx/access.log main;
    # Only log critical errors
    error_log /var/log/nginx/error.log crit;

    gzip             on;
    gzip_comp_level  2;
    gzip_min_length  1000;
    gzip_proxied     expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/json application/xml;

    sendfile on;

    # Send headers in one peace, its better then sending them one by one
    tcp_nopush on;

    # Don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # Allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # If client stop responding, free up memory
    send_timeout 2;

    # Server will close connection after this time
    keepalive_timeout 30;

    client_body_timeout 10;
    client_header_timeout 10;
    # This so so we don't allocate large memory buffers, if a request goes over this size then we write it to disk in chunks first (overridden for file uploads)
    client_body_buffer_size 10K;

    # client_body_buffer_size 0;
    # proxy_http_version 1.1;
    # proxy_request_buffering off;

    client_header_buffer_size 1k;
    client_max_body_size 10g;
    large_client_header_buffers 2 1k;

    include /etc/nginx/conf.d/*.conf;
}
